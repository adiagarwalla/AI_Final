import java.io.*;
import java.util.ArrayList;
import java.util.List;

public class DecisionTree implements Classifier {

    private DataSet d;
    private int P; //  positive label
    private int N; //  negative label
    private String author = "Helen and Aditya";
    private String description = "A decision tree classifier";
    // The root of the decision tree. See Node class for more details
    private Node root;

    /** Constructs a decision tree */
    public DecisionTree(DataSet d) {
	this.d = d;
	//  TODO: set N
	//  TODO: set P
	List<Integer> examples = new ArrayList<Integer>();
	List<Integer> attributes = new ArrayList<Integer>();
	for (int i = 0; i < d.numTrainExs; i++) {
	    examples.add(i);
	}
	for (int i = 0; i < d.numAttrs; i++) {
	    attributes.add(i);
	}
	root = DecisionTreeLearning(examples, attributes);
    }

    /** A simple decision tree for use in AdaBoost. The stump is parameterized 
     *  by the data set and the desired root. 
     */
    public DecisionTree(DataSet d, int attr) {
       
    	this.d = d;

    	//  TODO: set N
	//  TODO: set P
		
	
	Node node = new Node();
	// Set attribute for node
	node.attr = attr;
	
	// Set children for the node
	node.children = new Node[d.attrVals[attr].length];
	
	for (int i = 0; i < node.children.length; i++)
	    {
		Node child = new Node();
		int p = 0;
		int n = 0;
		for (int e = 0; e < d.numTrainExs; e++) {
		    if (d.trainEx[e][attr] == i) {
			if (d.trainLabel[e] == P) p++;
			else n++;
		    }
		}
		child.classification = p > n? P : N;
		node.children[i] = child;
	    }
	
	root = node;
    }

    /* Recursively constructs a Decision Tree */
    private Node DecisionTreeLearning(List<Integer> examples, 
				      List<Integer> attributes) {
	if (examples.size() == 0) return null;

	Node node = new Node();
	int n = 0;
	int p = 0;
	for (int i: examples) {
	    if (d.trainLabel[i] == P) p++;
	    else n++;
	}
	//  classification based on plurality
	node.classification = p > n? P: N;
	// continue if not all examples have same classification and attributes != 
	// empty
	if (!(p == 0 || n == 0 || attributes.size() == 0)) {
	    //  decide which attribute to split on
	    double maxGain = Double.NEGATIVE_INFINITY;
	    int attr = -1;
	    for (int i: attributes) {
		double temp = infoGain(i, examples);
		if (temp > maxGain) {
		    maxGain = temp;
		    attr = i;
		}
	    }
	    node.attr = attr;
	    node.children = new Node[d.attrVals[attr].length];
	    
	    //  calculate subtrees
	    attributes.remove(attr);
	    for (int i = 0; i < node.children.length; i++) {
		//  new subset of examples
		List<Integer> newExamples = new ArrayList<Integer>();
		for (int e: examples) {
		    if (d.trainEx[e][attr] == i) newExamples.add(e);
		}
		node.children[i] = DecisionTreeLearning(newExamples, attributes);
	    }
	}
	return node;
    }

    /** Information gain if splitting set examples on attribute attr */
    private double infoGain(int attr, List<Integer> examples) {
	int numVals = d.attrVals[attr].length;
	int p = 0;
	int n = 0;
	for (int e: examples) {
	    if (d.trainLabel[e] == P) p++;
	    else n++; 
	}
	double before = entropy(p/(p+n));
	double remainder = 0;
	for (int i = 0; i < numVals; i++) {
	    int nk = 0;
	    int pk = 0;
	    for (int e: examples) {
		if (d.trainEx[e][attr] == i) {
		    if (d.trainLabel[e] == P) pk++;
		    else nk++;
		}
	    }
	    remainder += ((pk + nk)/(p + n)) * entropy((pk)/(pk + nk)); 
	}
	return before - remainder;
    }
    /** Entropy of a Boolean random variable that is true with probability q */
    private double entropy(double q) {
	double q2 = 1-q;
	return -(q*Math.log(q)/Math.log(2) + q2*Math.log(q2)/Math.log(2));
    }

    /** Prediction based on the decision tree generated by constructor */
    public int predict(int[] ex) {
	Node node = root;
	int classification = N;
	while (node != null) {
	    if (node.children == null) break;
	    int attrVal = ex[node.attr];
	    classification = node.classification;
	    node = node.children[attrVal];
	}
	return classification;
    }

    /** This method returns a description of the learning algorithm. */
    public String algorithmDescription() {
	return description;
    }

    /** This method returns the author of this program. */
    public String author() {
	return author;
    }

    /** A simple main for testing this algorithm.  This main reads a
     * filestem from the command line, runs the learning algorithm on
     * this dataset, and prints the test predictions to filestem.testout.
     */
    public static void main(String argv[])
	throws FileNotFoundException, IOException {

	if (argv.length < 1) {
	    System.err.println("argument: filestem");
	    return;
	}

	String filestem = argv[0];

	DataSet d = new DataSet(filestem);

	Classifier c = new DecisionTree(d);

	d.printTestPredictions(c, filestem);
    }

}
